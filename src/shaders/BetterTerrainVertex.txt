#version 400 core

in vec3 position;
in vec4 in_color;
in vec3 normal;

flat out vec4 color;

uniform mat4 transformationMatrix;
uniform mat4 projectionMatrix;
uniform mat4 viewMatrix;
uniform vec3 lightDirection;
uniform vec3 lightColour;

void main(void){

	vec4 worldPosition = transformationMatrix * vec4(position,1.0);
	gl_Position = projectionMatrix * viewMatrix * worldPosition;
	
	
	vec3 surfaceNormal = (transformationMatrix * vec4(normal,0.0)).xyz;
	vec3 toLightVector = lightDirection;
	vec3 toCameraVector = (inverse(viewMatrix) * vec4(0.0,0.0,0.0,1.0)).xyz - worldPosition.xyz;
	
	vec3 unitNormal = normalize(surfaceNormal);
	vec3 unitLightVector = -normalize(toLightVector);
	
	float nDotl = dot(unitNormal,unitLightVector);
	float brightness = max(nDotl,0.5);
	vec3 diffuse = brightness * lightColour*1.1;
	
	color =  vec4(diffuse,1.0) * in_color;
}